name: Test, Build And Deploy to QA
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
env:
  version_control: ${{ vars.VERSION_CONTROL_QA }}-dev
  nexus_username: ${{vars.NEXUS_USER}}
  nexus_password: ${{secrets.NEXUS_PASSWORD}}
  conn_app_exchange_id: ${{vars.CONN_APP_EXCHANGE_CLIENT_ID}}
  conn_app_exchange_secret: ${{secrets.CONN_APP_EXCHANGE_CLIENT_SECRET}}
  conn_app_client_id: ${{vars.CONN_APP_CLIENT_ID}}
  conn_app_client_secret: ${{secrets.CONN_APP_CLIENT_SECRET}}
  anypoint_platform_id: ${{vars.ANYPOINT_PLATFORM_CLIENT_ID}}
  anypoint_platform_secret: ${{secrets.ANYPOINT_PLATFORM_CLIENT_SECRET}}
  mule_env: ${{vars.MULE_ENV}}
  anypoint_platform_visualizer_layer: ${{vars.ANYPOINT_PLATFORM_VISUALIZER_LAYER}}
  runtime_key: ${{secrets.RUNTIME_KEY}}
  vcores: ${{vars.VCORES}}
  replicas: ${{vars.REPLICAS}}
  target: ${{vars.TARGET}}
  environment: ${{vars.ENVIRONMENT}} 
  java_version: ${{vars.JAVA_VERSION}}
  release_channel: ${{vars.RELEASE_CHANNEL}}
  business_group_id: ${{vars.BUSINESS_GROUP_ID}}
  mule_version: ${{vars.MULE_VERSION}}
  clustered: ${{vars.CLUSTERED}}
jobs:
  test:
    runs-on: ubuntu-latest
    environment: qa   
    steps:
    - name: Checkout this repo
      uses: actions/checkout@v3
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: 8
    - name: Test with Maven
      run: mvn package --settings .maven/settings.xml -Druntime.key="${{ env.runtime_key }}"
    - name: Upload MUnit reports
      uses: actions/upload-artifact@v3
      with:
        name: munit-test-reports
        path: target/site/munit/coverage/
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
        mv $artifactName1 $artifactName2    
    - name: Upload artifact 
      uses: actions/upload-artifact@master
      with:
        name: artifacts
        path: target/*.jar            
  build:
    needs: test
    runs-on: ubuntu-latest
    environment: qa
    steps:
    - uses: actions/checkout@v3
    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Upgrade Version
      run: mvn versions:set -DnewVersion="${{ env.version_control }}" -DgenerateBackupPoms=false
    - name: Print Version Control
      run: echo "${{ env.version_control }}" 
    - name: Publish to Exchange
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DskipMunitTests --settings .maven/settings.xml \
        -Dmule.artifact=$artifactName \
        -Dconnected.app.client.id="${{ env.conn_app_client_id }}" \
        -Dconnected.app.client.secret="${{ env.conn_app_client_secret }}"  
    - name: Increment Variable
      uses: action-pack/increment@v2
      with:
        name: 'VERSION_CONTROL_QA'
        token: ${{ secrets.GH_LOGIN_TOKEN }} 
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: qa
    steps:
    - name: Checkout this repo
      uses: actions/checkout@v4
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Upgrade Version
      run: mvn versions:set -DnewVersion="${{ env.version_control }}" -DgenerateBackupPoms=false             
    - name: Deploy to CloudHub 2.0
      run: |
        mvn deploy -DmuleDeploy -DskipMunitTests --settings .maven/settings.xml \
        -Dconnected.app.client.id="${{ env.conn_app_client_id }}" \
        -Dconnected.app.client.secret="${{ env.conn_app_client_secret }}" \
        -Dprop.anypoint.platform.client_id="${{ env.anypoint_platform_id }}" \
        -Dprop.anypoint.platform.client_secret="${{ env.anypoint_platform_secret }}" \
        -Dprop.anypoint.platform.visualizer.layer="${{ env.anypoint_platform_visualizer_layer }}" \
        -Dprop.mule.env="${{ env.mule_env }}" \
        -Dprop.runtime.key="${{ env.runtime_key }}" \
        -Dch.vcores="${{ env.vcores }}" \
        -Dch.replicas="${{ env.replicas }}" \
        -Dch.target="${{ env.target }}" \
        -Dch.environment="${{ env.environment }}" \
        -Dch.business.group.id="${{ env.business_group_id }}" \
        -Dch.mule.version="${{ env.mule_version }}" \
        -Dch.java.version="${{ env.java_version }}" \
        -Dch.release.channel="${{ env.release_channel }}" \
        -Dch.clustered="${{ env.clustered }}"
