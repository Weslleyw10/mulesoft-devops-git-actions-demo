# This workflow will build a MuleSoft project and deploy to CloudHub

name: Build and Deploy to Sandbox

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      connectedAppClientId: ${{ secrets.CONNECTED_APP_CLIENT_ID }}
      connectedAppClientSecret: ${{ secrets.CONNECTED_APP_CLIENT_SECRET }}
      runtime.key: ${{ secrets.RUNTIME_KEY }}
      target: ${{ vars.TARGET }}
    steps:    
    - uses: actions/checkout@v3    
    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-    
    - name: Echo variables
      run: echo ${{env.target}} 
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu'    
    - name: Print effective-settings (optional)
      run: mvn help:effective-settings    
    - name: Build with Maven
      run: mvn -B package -s .maven/settings.xml    
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
        mv $artifactName1 $artifactName2    
    - name: Upload artifact 
      uses: actions/upload-artifact@master
      with:
          name: artifacts
          path: target/*.jar
                              
  upload:
    needs: build
    runs-on: ubuntu-latest
    env:
      connectedAppClientId: ${{ secrets.CONNECTED_APP_CLIENT_ID }}
      connectedAppClientSecret: ${{ secrets.CONNECTED_APP_CLIENT_SECRET }}
      runtime.key: ${{ secrets.RUNTIME_KEY }}
    steps:    
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - uses: actions/download-artifact@master
      with:
        name: artifacts
    - name: Upload to Exchange
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy \
         -s .maven/settings.xml \
         -Dmule.artifact=$artifactName \
  deploy:
    needs: upload
    runs-on: ubuntu-latest
    env:
      target: ${{ vars.TARGET }}
      connectedAppClientId: ${{ vars.CONNECTED_APP_CLIENT_ID }}
      connectedAppClientSecret: ${{ secrets.CONNECTED_APP_CLIENT_SECRET }}
      runtimeKey: ${{ secrets.RUNTIME_KEY }}
      environment: ${{ vars.ENVIRONMENT }}
      muleEnvironment: ${{ vars.MULE_ENVIRONMENT }}
      businessGroup: "cdc843be-ee07-442b-a612-9968d84e4d05"
    steps:    
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - uses: actions/download-artifact@master
      with:
        name: artifacts   
    - name: Deploy to Sandbox
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DmuleDeploy \
        -Dmule.artifact=$artifactName \
        -s .maven/settings.xml \
        -DskipTests \
        -DskipDeploymentVerification="true" \
        -Dtarget=${{env.target}} \
        -DconnectedAppClientId=${{env.connectedAppClientId}} \
        -DconnectedAppClientSecret=${{env.connectedAppClientSecret}} \
        -Druntime.key=${{env.runtimeKey}} \
        -Denvironment=${{env.environment}} \
        -Dmule.environment=${{env.muleEnvironment}} \
        -DbusinessGroup=${{env.businessGroup}}